Module BookRent
{
	Entity Client
	{
		ShortString Code { Unique; Required; MinLength 3; }
		ShortString Name { Required; }
		ShortString Surname { Required; }
		ShortString Email { Unique; }
		Reference ClientType;
		DateTime DateCreated { CreationTIme; }
		Deactivatable;
	}

	Entity ClientType
	{
		ShortString Code { Unique; Required; }
		ShortString Name { Required; }
		ShortString Description;
	}

	Entity Author
	{
		ShortString Code { Unique; Required; }
		ShortString Name { Required; }
		ShortString Surname { Required; }
		ShortString Initials {MaxLength 5; }
	}

	Entity Book
	{
		ShortString Code { Unique; }
		ShortString Title { Required; }
		ShortString Subject;
		Integer NumberOfPages { Required; }

		ItemFilter NotContainsBook 'item => !item.Title.Contains("Book")';
		ItemFilter InvalidNumberOfPages 'item => item.NumberOfPages <= 0';
		InvalidData InvalidNumberOfPages 'It is not allowed to enter number of pages less Author equal than 0'; 
	}

	Entity Genre
	{
		ShortString Code { Unique; }
		ShortString Name;
	}

	Entity BookGenre
	{
		Reference Book;
		Reference Genre;
		UniqueMultiple 'Book Genre';
	}

	Entity BookAuthor
	{
		Reference Book;
		Reference Author;
		UniqueMultiple 'Book Author';
	}

	Entity Rent
	{
		Date DateFrom;
		Date DateTo;
		Reference Book;
		Reference Client;
		UniqueMultiple 'Book Client DateFrom';
		DateTime DateCreated {CreationTIme; }

		ComposableFilterBy ClientRents '(query, repository, parameter)  => {
			var filtered = query.Where(item => item.Client.ID == parameter.ClientId && item.Book.Title == parameter.Title);
			return filtered;
		}';

	}

	Parameter ClientRents
	{
		Guid ClientId;
		ShortString Title;
	}

	Browse BookGenres BookRent.BookGenre
	{
		Take 'Book.Title';
		Take 'Book.NumberOfPages';
		Take 'Genre.Name';
	}	

	Action BookInsert '
	(parameter,repository, userInfo) => 
	{
		for(int i=4; i < parameter.NumberOfBooks; i++)
		{
			var newBook = new BookRent.Book {Code = parameter.CodePrefix + i, Title = parameter.Title, NumberOfPages = 100};
			repository.BookRent.Book.Insert(newBook);
		}
	}'
	{
		Integer NumberOfBooks;
		ShortString CodePrefix;
		ShortString Title;
	}


	SqlQueryable BookInfo "SELECT b.ID,
								  b.Title,
							      b.NumberOfPages,
								  a.[Name], 
								  a.Surname, 
								  g.[Name] Genre
							FROM BookRent.Book b
							LEFT JOIN BookRent.BookAuthor ba ON ba.BookID = b.ID
							LEFT JOIN BookRent.Author a ON a.ID = ba.AuthorID
							LEFT JOIN BookRent.BookGenre bg ON bg.BookID = b.ID
							LEFT JOIN BookRent.Genre g ON g.ID = bg.GenreID"
	{
		ShortString Title;
	}

}